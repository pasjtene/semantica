<?php

namespace Web\EntityBundle\Repository;
use Web\EntityBundle\Entity\Historic;

/**
 * HistoricRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoricRepository extends \Doctrine\ORM\EntityRepository
{
    public function  getByProjet($data, $limit=20, $page=1, $count=false )
    {
        $query = $this->createQueryBuilder('a');
        if($count)
        {
            $query->select('count(a.id)');
            return $query->getQuery()->getSingleScalarResult();
        }

        $query->select(['a','pr'])
            ->leftJoin('a.project','pr');

        if($data!=null)
        {

            $parameters['project_id']=$data['project_id'];


            $query->andWhere('pr.id =:project_id OR  pr.id IS NULL');
            $query->setParameters($parameters);
            $query->addOrderBy('a.id','desc');
            if($limit)
            {
                $page=$page<1?1:$page;
                $query->setFirstResult(($page-1)*$limit)->setMaxResults($limit);
            }
        }

        return $query->getQuery()->getResult();

    }

    public function  getByParticipant($data, $limit=20, $page=1, $count=false )
    {
        $list = $this->getByProjet($data,$limit,$page,$count);

        $items=null;
        /** @var Historic $item */
        foreach($list as $item)
        {
            $items[]= $item->getParticipator();
        }

        return $items;
    }
    
    public function findCurrentHistoric($id)
    {
        $query = $this->_em->createQuery("SELECT h FROM EntityBundle:Historic h WHERE h.participator = :pid AND h.enddate IS NULL");
        $query->setParameters(['pid' => $id]);
        
        return $query->getOneOrNullResult();
    }

    public function findCurrentParticipators($projectId)
    {
        $query = $this->createQueryBuilder('h');
        $query->distinct('p')
              ->leftJoin('h.participator', 'p')
              ->where('h.project = :pid')
              ->andWhere('p.active = true');

        $query->setParameters(['pid' => $projectId]);

        return $query->getQuery()->getResult();
    }
}
